package Application.Controllers;

import Application.Controllers.ResponseModel.ResponseModel;
import Application.DAOs.UserDAO;
import Application.Exceptions.DatosIncorrectosException;
import Application.Model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@CrossOrigin
@RestController
@RequestMapping("/User") // This means URL's start with /Usuarios (after Application path)
public class UserController {
    @Autowired // This means to get the bean called UserDAOImpl
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserDAO userDAO;

    @RequestMapping(method = RequestMethod.GET)
    public Iterable<User> getUsers() {
        return userDAO.findAll();
    }

    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity signup(@RequestBody User user) {
        if(!userDAO.existsByUsername(user.getUsername())) {
            userDAO.save(user);
            return ResponseEntity.ok().build();
        }
        else {
            return ResponseEntity.badRequest().build();
        }
    }

    @RequestMapping(method = RequestMethod.DELETE)
    public ResponseEntity deleteUser(@RequestParam long id) {
        userDAO.deleteById(id);
        return ResponseEntity.ok().body(new ResponseModel("Usuario eliminado."));
    }

    @PutMapping(value = "update")
    @ResponseStatus(value = HttpStatus.OK)
    public void updateUser(@RequestBody User user) {
        userDAO.update(user);
    }

    @PostMapping(value = "login")
    public @ResponseBody User login(@RequestBody User user) {
        User aLogearse = userDAO.get(user);

        if(aLogearse == null) throw new DatosIncorrectosException();

        return aLogearse;
    }

    @GetMapping(value = "search")
    public @ResponseBody List<User> searchByDeporte(@RequestParam String deporte) {
        return userDAO.getByDeporte(deporte);
    }

}
